{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","cols","rows","border","cnvrt","toUpperCase","showAlert","convert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","Notification","alert","class","role","word","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d7001cbd.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\"> {props.title} </a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <a  className=\"nav-link\" href=\"./About\">About us </a>\r\n                            </li> */}\r\n                        </ul>\r\n                        <div className={`custom-control custom-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                            <input type=\"checkbox\" onClick={props.toggleMode} className=\"custom-control-input\" id=\"customSwitch1\"/>\r\n                            <label className=\"custom-control-label mx-3\" htmlFor=\"customSwitch1\">Change mode</label>\r\n                        </div>       \r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        </>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutTitle: PropTypes.string\r\n}\r\n//isrequired also helpful when you forget to pass the value of props it gave an error \r\n//Navbar.propTypes = { title: PropTypes.string.isRequired, aboutTitle: PropTypes.string }\r\n\r\n//Default propsTypes\r\n/*\r\n Default works when you forget to pass the value of props and set the default value automatically  \r\n */\r\n// Navbar.defaultProps = {\r\n//     title: 'TxtUtils',\r\n//     aboutTitle: 'About us'\r\n// Dollar sign and underscores are actually an identifiers in React js is used to identify some sort of\r\n// variable, functions, properties, events, and objects.}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    //text = 'hello'; This is the wrong method to change the state\r\n    // setText('Enter the text you want to convert');This is the right method to change the state\r\n\r\n    const uperCaseHandle = () => {\r\n        console.log('Uppercase was clicked' + text);\r\n        let cnvrt = text.toUpperCase(); \r\n        setText(cnvrt)//Here setText set the value in the text var It is the method to set the var in states\r\n        props.showAlert('Convert to upper case','success'); \r\n    }\r\n    const lowerCaseHandle = () => {\r\n        console.log('lowercase was clicked' + text);\r\n        let convert = text.toLowerCase(); \r\n        setText(convert)//Here setText set the value in the text var It is the method to set the var in states\r\n        props.showAlert('Convert to lower case','success'); \r\n    }\r\n    const copyToClipboard = () => {\r\n    var text = document.getElementById('TextArea');   \r\n    text.select();\r\n    navigator.clipboard.writeText(text.value); \r\n    props.showAlert('Text copied ','success');   \r\n       \r\n    }\r\n    const rm_extra_spaces = () => {\r\n        let newText = text.split(/[2]+/);\r\n        setText(newText.join(' ')); \r\n        props.showAlert('Remove extra spaces','success');   \r\n        }\r\n    const total_char = () => {\r\n        console.log('Uppercase was clicked' + text);\r\n        let cnvrt = text.includes(); \r\n        setText(cnvrt)//Here setText set the value in the text var It is the method to set the var in states\r\n    }\r\n    const total_words = () => {\r\n        console.log('Uppercase was clicked' + text);\r\n        let cnvrt = text.includes(); \r\n        setText(cnvrt)//Here setText set the value in the text var It is the method to set the var in states\r\n    }\r\n    const handleOnChange = (event) => {\r\n        console.log('On change');\r\n        setText(event.target.value);//This line will help to write in the textarea without this you just see the default value that are in the state variable\r\n    }\r\n    const [text, setText] = useState('');\r\n    //const [name of state var, setText] = useState('Default value that initialize the settext function ');\r\n   \r\n    return (\r\n        <>\r\n        <div className='container' style={{color: props.mode === 'dark'?'white':'grey'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                    <label htmlFor='TextArea' className='Forms'>TextUtils</label>\r\n                    <textarea className=\"textarea\" value={text} onChange={handleOnChange} \r\n                style={{backgroundColor: props.mode === 'dark'?'white':'grey' , color: props.mode === 'dark'?'white':'white'}} \r\n                id=\"TextArea\"  cols=\"150\" rows=\"7\"></textarea>\r\n                </div>\r\n                <div >\r\n                <button className=\"btn btn-primary\" style={{border: 'grey',backgroundColor: props.mode === 'dark'?'white':'grey'}} onClick={uperCaseHandle} >Convert to UPPERCASE</button>\r\n                <button className=\"btn btn-primary mx-3\" style={{border: 'grey',backgroundColor: props.mode === 'dark'?'white':'grey'}}onClick={lowerCaseHandle} >Convert to lowercase</button>\r\n                <button className=\"btn btn-primary mx-3\" style={{border: 'grey',backgroundColor: props.mode === 'dark'?'white':'grey'}}onClick={copyToClipboard} >Copy to clipboard</button>\r\n                <button className=\"btn btn-primary mx-3\" style={{border: 'grey',backgroundColor: props.mode === 'dark'?'white':'grey'}}onClick={rm_extra_spaces} >Remove extra spaces</button>\r\n                </div>\r\n       </div>\r\n       <div className=\"container\" style={{color: props.mode === 'dark'?'white':'grey'} }>\r\n           <h3> </h3>\r\n            <p>{text.split(' ').length} No of words <br />{text.length} No of characters </p>\r\n            <p>{0.008 * text.split(' ').length} time taken in read this text</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'Write something in the textbox to preview it'}</p>\r\n            \r\n       </div>\r\n       </>\r\n    )\r\n}\r\n//State variable is a var that react automatically watched them \r\n","import React from 'react'\r\n\r\nfunction Notification(props) {\r\n    const capitalize= (word)=>{\r\n        const log = word.toLowerCase();\r\n        return log.charAt(0).toUpperCase() + log.slice(1); \r\n    \r\n    }\r\n    return (\r\n        props.alert && <div>\r\n             <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import './App.css';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport React, { useState } from 'react';\nimport Notification from './component/Notification';\n\nfunction App() {\n  const [mode, setMode] = useState('light');//Now we can control the mode of website from here\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark mode has been enalbled', 'success');\n      document.title = 'TXTUtils = DARK MODE';\n      setInterval(() => {\n        document.title = 'Install TXTUtils now ';\n      }, 2000);\n      setInterval(() => {\n        document.title = 'Enable TXTUtils DARK MODE';\n      }, 1500);\n    }\n    //these interval are used to blinking the text but this isn't good for user experience   \n    else {\n      setMode('light');\n      document.body.style.backgroundColor = '#fafbfc';\n      showAlert('Light mode has been enalbled', 'success');\n      document.title = 'TXTUtils = LIGHT MODE';\n    }\n  }\n  return (\n    <>\n      <Navbar title='TextUTils' mode={mode} toggleMode={toggleMode} />\n      <Notification alert={alert} />\n      <div className=\"container my-3\" >\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n\n  //here we through Textutils as a props to another component the Pros of this thing is we can reuse our code \n/*Passing a value through variable in a component is called props\nProps can't changed they are read-only\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}